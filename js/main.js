/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/***/ (function() {

eval("const burger = document.querySelector('.header__burger');\r\nconst menu = document.querySelector('.menu');\r\n\r\nif (burger) {\r\n  burger.addEventListener('click', () => {\r\n    burger.classList.toggle('active');\r\n    menu.classList.toggle('active');\r\n  });\r\n}\r\n\r\nconst lkBurger = document.querySelector('.header-lk__burger');\r\nconst lkSidebar = document.querySelector('.lk-sidebar');\r\n\r\nif (lkBurger) {\r\n  lkBurger.addEventListener('click', () => {\r\n    lkBurger.classList.toggle('active');\r\n    lkSidebar.classList.toggle('active');\r\n  });\r\n}\r\n\r\n\r\nconst burgerElement = document.querySelector('.catalog__burger');\r\nconst sidebarElement = document.querySelector('.catalog__sidebar');\r\n\r\nif (burgerElement) {\r\n  burgerElement.addEventListener('click', function () {\r\n    burgerElement.classList.toggle('active');\r\n    sidebarElement.classList.toggle('active');\r\n  });\r\n}\r\n\r\n\r\n\r\n/* Select */\r\nlet selects = document.getElementsByTagName('select');\r\nif (selects.length > 0) {\r\n  selects_init();\r\n}\r\n\r\nfunction selects_init() {\r\n  for (let index = 0; index < selects.length; index++) {\r\n    const select = selects[index];\r\n    select_init(select);\r\n  }\r\n  document.addEventListener('click', function (e) {\r\n    selects_close(e);\r\n  });\r\n  // Закрываем окно по клавише ESC\r\n  document.addEventListener('keydown', function (e) {\r\n    if (e.which == 27) {\r\n      selects_close(e);\r\n    }\r\n  });\r\n}\r\n\r\nfunction selects_close(e) {\r\n  const selects = document.querySelectorAll('.select');\r\n  if (!e.target.closest('.select')) {\r\n    for (let index = 0; index < selects.length; index++) {\r\n      const select = selects[index];\r\n      const select_body_options = select.querySelector('.select__options');\r\n      select.classList.remove('_active');\r\n      _slideUp(select_body_options, 100,);\r\n    }\r\n  }\r\n}\r\n\r\nfunction select_init(select) {\r\n  const select_parent = select.parentElement;\r\n  const select_modifikator = select.getAttribute('id');\r\n  const select_selected_option = select.querySelector('option:checked');\r\n  select.setAttribute('data-default', select_selected_option.value);\r\n  select.style.display = 'none';\r\n  select_parent.insertAdjacentHTML('beforeend', '<div class=\"select select_' + select_modifikator + '\"></div>');\r\n  let new_select = select.parentElement.querySelector('.select');\r\n  new_select.appendChild(select);\r\n  select_item(select);\r\n}\r\n\r\nfunction select_item(select) {\r\n  const select_parent = select.parentElement;\r\n  const select_items = select_parent.querySelector('.select__item');\r\n  const select_options = select.querySelectorAll('option');\r\n  const select_selected_option = select.querySelector('option:checked');\r\n  const select_selected_text = select_selected_option.text;\r\n  const select_type = select.getAttribute('data-type');\r\n  if (select_items) {\r\n    select_items.remove();\r\n  }\r\n  let select_type_content = '';\r\n  if (select_type == 'input') {\r\n    select_type_content = '<div class=\"select__value icon-select-arrow\"><input autocomplete=\"off\" type=\"text\" name=\"form[]\" value=\"' + select_selected_text + '\" data-error=\"Ошибка\" data-value=\"' + select_selected_text + '\" class=\"select__input\"></div>';\r\n  } else {\r\n    select_type_content = `<div class=\"select__value\"><span>${select_selected_text}</span></div>`;\r\n  }\r\n  select_parent.insertAdjacentHTML('beforeend',\r\n    '<div class=\"select__item\">' +\r\n    '<div class=\"select__title\">' + select_type_content + '</div>' +\r\n    '<div class=\"select__options\">' + select_get_options(select_options) + '</div>' +\r\n    '</div></div>');\r\n  select_actions(select, select_parent);\r\n}\r\n\r\nfunction select_actions(original, select) {\r\n  const select_item = select.querySelector('.select__item');\r\n  const select_body_options = select.querySelector('.select__options');\r\n  const select_options = select.querySelectorAll('.select__option');\r\n  const select_type = original.getAttribute('data-type');\r\n  const select_input = select.querySelector('.select__input');\r\n\r\n  select_item.addEventListener('click', function () {\r\n    let selects = document.querySelectorAll('.select');\r\n    for (let index = 0; index < selects.length; index++) {\r\n      const select = selects[index];\r\n      const select_body_options = select.querySelector('.select__options');\r\n      if (select != select_item.closest('.select')) {\r\n        select.classList.remove('_active');\r\n        _slideUp(select_body_options, 100);\r\n      }\r\n    }\r\n    _slideToggle(select_body_options, 100);\r\n    select.classList.toggle('_active');\r\n  });\r\n  for (let index = 0; index < select_options.length; index++) {\r\n    const select_option = select_options[index];\r\n    const select_option_value = select_option.getAttribute('data-value');\r\n    const select_option_text = select_option.innerHTML;\r\n    if (select_type == 'input') {\r\n      select_input.addEventListener('keyup', select_search);\r\n    } else {\r\n      if (select_option.getAttribute('data-value') == original.value) {\r\n        select_option.classList.add('_active');\r\n      }\r\n    }\r\n    select_option.addEventListener('click', function () {\r\n      for (let index = 0; index < select_options.length; index++) {\r\n        const el = select_options[index];\r\n        el.style.display = 'block';\r\n        el.classList.remove('_active');\r\n      }\r\n      if (select_type == 'input') {\r\n        select_input.value = select_option_text;\r\n        original.value = select_option_value;\r\n\r\n      } else {\r\n        select.querySelector('.select__value').innerHTML = `<span>${select_option_text}</span>`;\r\n        original.value = select_option_value;\r\n        select_option.classList.add('_active')\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction select_get_options(select_options) {\r\n  if (select_options) {\r\n    let select_options_content = '';\r\n    for (let index = 0; index < select_options.length; index++) {\r\n      const select_option = select_options[index];\r\n      const select_option_value = select_option.value;\r\n      if (select_option_value != '') {\r\n        const select_option_text = select_option.text;\r\n        select_options_content = select_options_content + '<div data-value=\"' + select_option_value + '\" class=\"select__option\">' + select_option_text + '</div>';\r\n      }\r\n    }\r\n    return select_options_content;\r\n  }\r\n}\r\n\r\nfunction select_search(e) {\r\n  let select_options = e.target.closest('.select ').querySelectorAll('.select__option');\r\n  let select_search_text = e.target.value.toUpperCase();\r\n  for (let i = 0; i < select_options.length; i++) {\r\n    let select_option = select_options[i];\r\n    let select_txt_value = select_option.textContent || select_option.innerText;\r\n    if (select_txt_value.toUpperCase().indexOf(select_search_text) > -1) {\r\n      select_option.style.display = \"\";\r\n    } else {\r\n      select_option.style.display = \"none\";\r\n    }\r\n  }\r\n}\r\n\r\nfunction selects_update_all() {\r\n  let selects = document.querySelectorAll('select');\r\n  if (selects) {\r\n    for (let index = 0; index < selects.length; index++) {\r\n      const select = selects[index];\r\n      select_item(select);\r\n    }\r\n  }\r\n}\r\n\r\n/* Slide Toggle - Анимации плавноно открытия, закрытия обьекта */\r\nlet _slideUp = (target, duration = 500, displayCSS = 'block') => {\r\n  target.style.transitionProperty = \"height, margin, padding\";\r\n  target.style.transitionDuration = duration + \"ms\";\r\n  target.style.height = target.offsetHeight + \"px\";\r\n  target.offsetHeight;\r\n  target.style.overflow = \"hidden\";\r\n  target.style.height = 0;\r\n  target.style.paddingTop = 0;\r\n  target.style.paddingBottom = 0;\r\n  target.style.marginTop = 0;\r\n  target.style.marginBottom = 0;\r\n  window.setTimeout(() => {\r\n    target.style.display = \"none\";\r\n    target.style.removeProperty(\"height\");\r\n    target.style.removeProperty(\"padding-top\");\r\n    target.style.removeProperty(\"padding-bottom\");\r\n    target.style.removeProperty(\"margin-top\");\r\n    target.style.removeProperty(\"margin-bottom\");\r\n    target.style.removeProperty(\"overflow\");\r\n    target.style.removeProperty(\"transition-duration\");\r\n    target.style.removeProperty(\"transition-property\");\r\n    target.classList.remove(\"_slide\");\r\n  }, duration);\r\n}\r\n\r\nlet _slideDown = (target, duration = 500, displayCSS = 'block') => {\r\n  target.style.removeProperty(\"display\");\r\n  let display = window.getComputedStyle(target).display;\r\n  if (display === \"none\")\r\n    display = displayCSS;\r\n  target.style.display = display;\r\n  let height = target.offsetHeight;\r\n  target.style.overflow = \"hidden\";\r\n  target.style.height = 0;\r\n  target.style.paddingTop = 0;\r\n  target.style.paddingBottom = 0;\r\n  target.style.marginTop = 0;\r\n  target.style.marginBottom = 0;\r\n  target.offsetHeight;\r\n  target.style.transitionProperty = \"height, margin, padding\";\r\n  target.style.transitionDuration = duration + \"ms\";\r\n  target.style.height = height + \"px\";\r\n  target.style.removeProperty(\"padding-top\");\r\n  target.style.removeProperty(\"padding-bottom\");\r\n  target.style.removeProperty(\"margin-top\");\r\n  target.style.removeProperty(\"margin-bottom\");\r\n  window.setTimeout(() => {\r\n    target.style.removeProperty(\"height\");\r\n    target.style.removeProperty(\"overflow\");\r\n    target.style.removeProperty(\"transition-duration\");\r\n    target.style.removeProperty(\"transition-property\");\r\n    target.classList.remove(\"_slide\");\r\n  }, duration);\r\n}\r\n\r\nlet _slideToggle = (target, duration = 500, displayCSS = 'block') => {\r\n  if (!target.classList.contains(\"_slide\")) {\r\n    target.classList.add(\"_slide\");\r\n    if (window.getComputedStyle(target).display === \"none\") {\r\n      return _slideDown(target, duration, displayCSS);\r\n    } else {\r\n      return _slideUp(target, duration, displayCSS);\r\n    }\r\n  }\r\n}\r\n\r\n// ========= Аккардион\r\nconst accordionItems = document.querySelectorAll('.how-work__item');\r\nconst accordionFaqItems = document.querySelectorAll('.faq__item');\r\n\r\nif (accordionFaqItems.length > 0) {\r\n  accordionItems.forEach((item, index) => {\r\n    const burger = item.querySelector('.how-work__burger');\r\n\r\n    if (index === 0) {\r\n      burger.parentElement.classList.add('open');\r\n    }\r\n\r\n    burger.addEventListener('click', () => {\r\n      accordionItems.forEach(otherItem => {\r\n        if (otherItem !== item) {\r\n          otherItem.classList.remove('open');\r\n        }\r\n      });\r\n      burger.parentElement.classList.add('open');\r\n    });\r\n  });\r\n}\r\n\r\nif (accordionFaqItems.length > 0) {\r\n\r\n  accordionFaqItems[0].classList.add('active');\r\n  accordionFaqItems[0].querySelector('.faq__content').style.maxHeight = accordionFaqItems[0].querySelector('.faq__content').scrollHeight + 'px';\r\n\r\n  accordionFaqItems.forEach(item => {\r\n    const header = item.querySelector('.faq__header');\r\n    const content = item.querySelector('.faq__content');\r\n\r\n    header.addEventListener('click', () => {\r\n      accordionFaqItems.forEach(otherItem => {\r\n        if (otherItem !== item && otherItem.classList.contains('active')) {\r\n          otherItem.classList.remove('active');\r\n          otherItem.querySelector('.faq__content').style.maxHeight = 0;\r\n        }\r\n      });\r\n\r\n      item.classList.toggle('active');\r\n\r\n      if (item.classList.contains('active')) {\r\n        content.style.maxHeight = content.scrollHeight + 'px';\r\n      } else {\r\n        content.style.maxHeight = 0;\r\n      }\r\n    });\r\n  });\r\n\r\n}\r\n\r\n\r\nconst accordionElements = document.querySelectorAll('.multiselect-accordion');\r\nconst arrows = document.querySelectorAll('.arrow');\r\n\r\nif (accordionElements.length > 0) {\r\n\r\n\r\n\r\n  accordionElements.forEach(function (accordionElement) {\r\n    console.log(accordionElement)\r\n    const parentElement = accordionElement.querySelector('.multiselect-accordion__parent');\r\n    const childElements = accordionElement.querySelectorAll('.multiselect-accordion__children input[type=\"checkbox\"]');\r\n    const searchInput = accordionElement.querySelector('.search-input');\r\n\r\n    parentElement.addEventListener('click', function () {\r\n      const checkbox = this.querySelector('.checkbox');\r\n      if (!checkbox) {\r\n        const parentElement = this.parentElement;\r\n        const children = parentElement.querySelector('.multiselect-accordion__children');\r\n        parentElement.classList.toggle('is-open');\r\n        if (children) {\r\n          children.style.maxHeight = parentElement.classList.contains('is-open') ? children.scrollHeight + 'px' : 0;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Обработчик изменения состояния родительского элемента\r\n    parentElement.addEventListener('change', function () {\r\n      const isChecked = this.querySelector('input[type=\"checkbox\"]')?.checked;\r\n\r\n      // Устанавливаем состояние для всех дочерних элементов\r\n      childElements.forEach(function (childElement) {\r\n        childElement.checked = isChecked;\r\n      });\r\n\r\n      updateParentState();\r\n    });\r\n\r\n    // Обработчик изменения состояния дочерних элементов\r\n    childElements.forEach(function (childElement) {\r\n      childElement.addEventListener('change', function () {\r\n        updateParentState();\r\n      });\r\n    });\r\n\r\n    if (searchInput) {\r\n      searchInput.addEventListener('input', function () {\r\n        const searchTerm = this.value.toLowerCase();\r\n\r\n        childElements.forEach(function (childElement) {\r\n          const labelTextElement = childElement.nextElementSibling;\r\n          const labelText = labelTextElement ? labelTextElement.textContent.toLowerCase() : '';\r\n          const checkboxValue = childElement.getAttribute('value') || '';\r\n\r\n          if (labelText.includes(searchTerm) || checkboxValue.toLowerCase().includes(searchTerm)) {\r\n            childElement.parentNode.style.display = 'flex';\r\n          } else {\r\n            childElement.parentNode.style.display = 'none';\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    // Функция для обновления состояния родительского элемента\r\n    function updateParentState() {\r\n      const checkedChildElements = Array.from(childElements).filter(function (childElement) {\r\n        return childElement.checked;\r\n      });\r\n\r\n      // Устанавливаем класс .is_one_active, если хотя бы 1 дочерний элемент отмечен\r\n      if (checkedChildElements.length > 0) {\r\n        parentElement.classList.add('is_one_active');\r\n      } else {\r\n        parentElement.classList.remove('is_one_active');\r\n      }\r\n\r\n      // Устанавливаем состояние родительского элемента на основе выбранных дочерних элементов\r\n      const parentCheckbox = parentElement.querySelector('input[type=\"checkbox\"]');\r\n      if (parentCheckbox && parentCheckbox.nodeName.toLowerCase() === 'input' && parentCheckbox.type === 'checkbox') {\r\n        // Родительский элемент является чекбоксом\r\n        if (checkedChildElements.length === childElements.length) {\r\n          parentCheckbox.checked = true;\r\n          parentElement.classList.remove('is_one_active');\r\n        } else {\r\n          parentCheckbox.checked = false;\r\n        }\r\n      } else {\r\n        // Родительский элемент не является чекбоксом\r\n        // Добавьте соответствующую логику для вашего случая\r\n      }\r\n\r\n      // Обновляем текст в скобках с числом выбранных дочерних элементов\r\n      const countElement = parentElement.querySelector('.count');\r\n      if (checkedChildElements.length > 0) {\r\n        countElement.textContent = `(${checkedChildElements.length})`;\r\n        countElement.style.display = 'inline';\r\n      } else {\r\n        countElement.style.display = 'none';\r\n      }\r\n    }\r\n  });\r\n\r\n  arrows.forEach(arrow => {\r\n    arrow.addEventListener('click', function () {\r\n      const parent = this.parentElement.parentElement;\r\n      const children = parent.querySelector('.multiselect-accordion__children');\r\n      parent.classList.toggle('is-open');\r\n      if (children) {\r\n        children.style.maxHeight = parent.classList.contains('is-open') ? children.scrollHeight + 'px' : 0;\r\n      }\r\n    });\r\n  });\r\n\r\n  document.addEventListener('click', function (event) {\r\n    const target = event.target;\r\n    const isAccordionItem = target.closest('.multiselect-accordion__item');\r\n    if (!isAccordionItem) {\r\n      const accordionItems = document.querySelectorAll('.multiselect-accordion__item');\r\n      accordionItems.forEach(item => {\r\n        item.classList.remove('is-open');\r\n        const children = item.querySelector('.multiselect-accordion__children');\r\n        if (children) {\r\n          children.style.maxHeight = 0;\r\n        }\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nconst swiper = new Swiper('.product-content__slider', {\r\n  slidesPerView: 1,\r\n\r\n  keyboard: {\r\n    enabled: true,\r\n    onlyInViewport: false,\r\n  },\r\n  navigation: {\r\n    nextEl: '.product-content__next',\r\n    prevEl: '.product-content__prev',\r\n  },\r\n  effect: 'fade',\r\n  fadeEffect: {\r\n    crossFade: true\r\n  },\r\n});\r\n\r\nvar tabButtons = document.querySelectorAll('.product-tabs__buttons a');\r\nvar tabItems = document.querySelectorAll('.product-tabs__item');\r\n\r\nif (tabItems.length > 0) {\r\n\r\n  tabButtons[0].classList.add('active');\r\n  tabItems[0].classList.add('active');\r\n\r\n  tabButtons.forEach(function (button, index) {\r\n    button.addEventListener('click', function (e) {\r\n      e.preventDefault();\r\n\r\n      tabButtons.forEach(function (btn) {\r\n        btn.classList.remove('active');\r\n      });\r\n\r\n      tabItems.forEach(function (item) {\r\n        item.classList.remove('active');\r\n      });\r\n\r\n      button.classList.add('active');\r\n      tabItems[index].classList.add('active');\r\n    });\r\n  });\r\n}\r\n\r\n\r\n// Пример Кнопки: <button data-popup=\"#mainForm\">...</button>\r\ndocument.querySelectorAll('button[data-popup]').forEach(function (button) {\r\n  button.addEventListener('click', function (e) {\r\n    document.querySelectorAll('.popup').forEach(function (popup) {\r\n      popup.classList.remove('show');\r\n    });\r\n    var popupId = button.getAttribute('data-popup');\r\n    document.querySelector(popupId).classList.add('show');\r\n    document.querySelector('html').classList.add('lock');\r\n  });\r\n});\r\n\r\ndocument.querySelectorAll('a[data-popup-id]').forEach(function (a) {\r\n  a.addEventListener('click', function (target) {\r\n    target.preventDefault()\r\n    var namePopup = a.getAttribute('data-popup-id');\r\n    document.querySelector(namePopup).classList.add('show');\r\n    document.querySelector('body').classList.add('lock');\r\n  });\r\n});\r\n\r\n// Закрываем окно при нажатии на кнопку\r\ndocument.querySelectorAll('.popup__close, .popup-close').forEach(function (closeButton) {\r\n  closeButton.addEventListener('click', function () {\r\n    document.querySelectorAll('.popup').forEach(function (popup) {\r\n      popup.classList.remove('show');\r\n    });\r\n    document.querySelector('html').classList.remove('lock');\r\n  });\r\n});\r\n\r\n// Закрываем окно при клике за пределами окна\r\n// document.addEventListener('mouseup', function (e) {\r\n//   var div = document.querySelector('.popup__body');\r\n//   if (div && !div.contains(e.target)) {\r\n//     document.querySelectorAll('.popup').forEach(function (popup) {\r\n//       popup.classList.remove('show');\r\n//     });\r\n//     document.querySelector('html').classList.remove('lock');\r\n//   }\r\n// });\r\n\r\n// Проверяем наличие формы на странице\r\nconst formRadioChange = document.querySelector('#handleRadioChange');\r\nif (formRadioChange) {\r\n  // Получаем ссылки на элементы формы\r\n  const radioButtons = document.querySelectorAll('input[name=\"type-input\"]');\r\n  const telItem = document.getElementById('user-tel-item');\r\n  const emailItem = document.getElementById('user-email-item');\r\n\r\n  // Функция для обработки изменений в радиокнопках\r\n  function handleRadioChange(event) {\r\n    if (event.target.value === 'Телефон') {\r\n      telItem.style.display = 'block';\r\n      emailItem.style.display = 'none';\r\n    } else if (event.target.value === 'Почта') {\r\n      telItem.style.display = 'none';\r\n      emailItem.style.display = 'block';\r\n    }\r\n  }\r\n\r\n  // Назначаем обработчик события на радиокнопки\r\n  radioButtons.forEach(radioButton => {\r\n    radioButton.addEventListener('change', handleRadioChange);\r\n  });\r\n\r\n  // Инициализируем состояние полей в соответствии с выбранной радиокнопкой при загрузке страницы\r\n  const checkedRadioButton = document.querySelector('input[name=\"type-input\"]:checked');\r\n  if (checkedRadioButton.value === 'Телефон') {\r\n    telItem.style.display = 'block';\r\n    emailItem.style.display = 'none';\r\n  } else if (checkedRadioButton.value === 'Почта') {\r\n    telItem.style.display = 'none';\r\n    emailItem.style.display = 'block';\r\n  }\r\n}\r\n\r\nconst passwordToggles = document.querySelectorAll('.password-toggle');\r\n\r\npasswordToggles.forEach(function (toggle) {\r\n  const passwordInput = toggle.previousElementSibling;\r\n\r\n  toggle.addEventListener('click', function () {\r\n    if (passwordInput.type === 'password') {\r\n      passwordInput.type = 'text';\r\n      toggle.classList.add('password-visible');\r\n    } else {\r\n      passwordInput.type = 'password';\r\n      toggle.classList.remove('password-visible');\r\n    }\r\n  });\r\n});\r\n\r\nconst fileInput = document.getElementById('file-input');\r\nconst fileCountLimit = 1;\r\n\r\nif (fileInput) {\r\n  fileInput.addEventListener('change', handleFileInputChange);\r\n\r\n  function handleFileInputChange(event) {\r\n    const fileList = event.target.files;\r\n    const fileCount = fileList.length;\r\n\r\n    const fileNames = [];\r\n    for (let i = 0; i < fileCount; i++) {\r\n      fileNames.push(fileList[i].name);\r\n    }\r\n\r\n    const addButton = document.querySelector('.custom-field__button');\r\n    addButton.textContent = `Выбран ${fileCount} файл`;\r\n  }\r\n}\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n  const avatarElement = document.querySelector('.header-lk-users__avatar');\r\n  const usersElement = document.querySelector('.header-lk-users');\r\n\r\n  if (avatarElement && usersElement) {\r\n    document.addEventListener('click', function (event) {\r\n      const isClickInsideAvatar = avatarElement.contains(event.target);\r\n      const isClickOutsideUsers = !usersElement.contains(event.target);\r\n\r\n      if (isClickInsideAvatar) {\r\n        usersElement.classList.toggle('active');\r\n      } else if (isClickOutsideUsers) {\r\n        usersElement.classList.remove('active');\r\n      }\r\n    });\r\n  }\r\n});\r\n\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n  const avatarElement = document.querySelector('.info-drop__icon');\r\n  const usersElement = document.querySelector('.info-drop');\r\n\r\n  if (avatarElement && usersElement) {\r\n    document.addEventListener('click', function (event) {\r\n      const isClickInsideAvatar = avatarElement.contains(event.target);\r\n      const isClickOutsideUsers = !usersElement.contains(event.target);\r\n\r\n      if (isClickInsideAvatar) {\r\n        usersElement.classList.toggle('active');\r\n      } else if (isClickOutsideUsers) {\r\n        usersElement.classList.remove('active');\r\n      }\r\n    });\r\n  }\r\n});\r\n\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n  // Проверка наличия табов на странице\r\n  var tabs = document.querySelectorAll(\".lk-tabs__tab\");\r\n  var tabsItem = document.querySelectorAll(\".lk-tabs__item\");\r\n  if (tabs.length === 0) {\r\n    return;\r\n  }\r\n\r\n  // Установка первого таба активным\r\n  tabs[0].classList.add(\"active\");\r\n  tabsItem[0].classList.add(\"active\");\r\n\r\n  // Обработчик клика по табу\r\n  tabs.forEach(function (tab) {\r\n    tab.addEventListener(\"click\", function () {\r\n      var activeTab = document.querySelector(\".lk-tabs__tab.active\");\r\n      var activeContent = document.querySelector(\".lk-tabs__item.active\");\r\n\r\n      // Удаление активного класса у текущего таба и его содержимого\r\n      activeTab.classList.remove(\"active\");\r\n      activeContent.classList.remove(\"active\");\r\n\r\n      // Добавление активного класса к выбранному табу и его содержимому\r\n      var targetTab = document.querySelector(tab.getAttribute(\"data-tab\"));\r\n      tab.classList.add(\"active\");\r\n      targetTab.classList.add(\"active\");\r\n    });\r\n  });\r\n});\r\n\r\nvar container = document.getElementById('work-card-container');\r\n\r\nif (container !== null) {\r\n  container.addEventListener('click', function (event) {\r\n    if (event.target.matches('.switch-text input[type=\"checkbox\"]')) {\r\n      var checkbox = event.target;\r\n      var deliveryContent = checkbox.closest('.work-card__delivery').querySelector('._delivery');\r\n\r\n      if (checkbox.checked) {\r\n        deliveryContent.classList.remove('_hidden');\r\n      } else {\r\n        deliveryContent.classList.add('_hidden');\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n// Получаем ссылку на чекбокс \"Выбрать все\"\r\nvar selectAllCheckbox = document.querySelector('.checkbox input[value=\"Выбрать все\"]');\r\n\r\n// Получаем ссылки на все чекбоксы, которые нужно выбрать/снять\r\nvar checkboxes = document.querySelectorAll('.all-notification__item input[type=\"checkbox\"]');\r\n\r\n\r\n\r\n// Добавляем обработчики события клика ко всем остальным чекбоксам\r\nif (checkboxes.length > 0) {\r\n  // Добавляем обработчик события клика к чекбоксу \"Выбрать все\"\r\n  selectAllCheckbox.addEventListener('click', function () {\r\n    var isChecked = selectAllCheckbox.checked;\r\n\r\n    // Проходимся по всем чекбоксам и устанавливаем состояние, идентичное чекбоксу \"Выбрать все\"\r\n    checkboxes.forEach(function (checkbox) {\r\n      checkbox.checked = isChecked;\r\n    });\r\n  });\r\n  checkboxes.forEach(function (checkbox) {\r\n    checkbox.addEventListener('click', function () {\r\n      // Проверяем, если все остальные чекбоксы отмечены, то устанавливаем чекбокс \"Выбрать все\" в отмеченное состояние, иначе снимаем отметку\r\n      var areAllChecked = Array.from(checkboxes).every(function (checkbox) {\r\n        return checkbox.checked;\r\n      });\r\n\r\n      selectAllCheckbox.checked = areAllChecked;\r\n    });\r\n  });\r\n}\r\n\r\n\r\n\r\n// Обработчик события для табов чатов\r\nvar tabButtons = document.querySelectorAll('.chat-sidebar__chat');\r\nif (tabButtons.length > 0) {\r\n  tabButtons.forEach(function (button) {\r\n    button.addEventListener('click', function () {\r\n      var chatId = this.getAttribute('data-chat-id');\r\n\r\n      // Скрываем все чаты\r\n      var chats = document.querySelectorAll('.chat__item');\r\n      chats.forEach(function (chat) {\r\n        chat.classList.remove('active');\r\n      });\r\n\r\n      // Показываем выбранный чат\r\n      var selectedChat = document.getElementById(chatId);\r\n      selectedChat.classList.add('active');\r\n\r\n      // Делаем активным выбранный таб\r\n      tabButtons.forEach(function (btn) {\r\n        btn.classList.remove('active');\r\n      });\r\n      this.classList.add('active');\r\n\r\n      var chatContents = document.querySelector('.chat-body.active .chat-body__content');\r\n\r\n      chatContents.scrollTop = chatContents.scrollHeight - chatContents.clientHeight;\r\n    });\r\n  });\r\n\r\n  // Обработчик события для кнопок закрытия чата\r\n  var closeButtons = document.querySelectorAll('.close-chat');\r\n  closeButtons.forEach(function (button) {\r\n    button.addEventListener('click', function () {\r\n      var chat = this.parentNode.parentNode.parentNode;\r\n      // Удаляем закрытый чат из DOM\r\n      chat.classList.remove('active');\r\n      // Делаем первый чат активным при загрузке страницы\r\n      var firstChat = document.querySelector('.chat__item');\r\n      firstChat.classList.add('active');\r\n    });\r\n  });\r\n\r\n  // Делаем первый чат активным при загрузке страницы\r\n  var firstChat = document.querySelector('.chat__item');\r\n  firstChat.classList.add('active');\r\n}\r\n\r\n\r\n// Получаем все элементы с атрибутами data-show и data-close\r\nconst elementsForms = document.querySelectorAll('[data-show],[data-close]');\r\n\r\nelementsForms.forEach(element => {\r\n  element.addEventListener('click', () => {\r\n    const showValue = element.getAttribute('data-show');\r\n    const closeValue = element.getAttribute('data-close');\r\n\r\n    const showElement = document.getElementById(showValue);\r\n    const closeElement = document.getElementById(closeValue);\r\n\r\n    if (showElement) {\r\n      showElement.classList.remove('hidden');\r\n    }\r\n    if (closeElement) {\r\n      closeElement.classList.add('hidden');\r\n    }\r\n  });\r\n});\r\n\r\n\r\nvar fileUpload = document.getElementById('file-upload2');\r\nvar fileInputs = document.getElementById('file-input2');\r\nvar preview = document.querySelector(\"#preview\");\r\n\r\nif (fileUpload) {\r\n  fileUpload.addEventListener('dragover', function (e) {\r\n    e.preventDefault();\r\n    fileUpload.classList.add('dragover');\r\n  });\r\n\r\n  fileUpload.addEventListener('dragleave', function (e) {\r\n    e.preventDefault();\r\n    fileUpload.classList.remove('dragover');\r\n  });\r\n\r\n  fileUpload.addEventListener('drop', function (e) {\r\n    e.preventDefault();\r\n    fileUpload.classList.remove('dragover');\r\n    var files = e.dataTransfer.files;\r\n    if (files.length > 0) {\r\n      for (var i = 0; i < files.length; i++) {\r\n        var reader = new FileReader();\r\n        reader.onload = createImageElement;\r\n        reader.readAsDataURL(files[i]);\r\n      }\r\n    }\r\n  });\r\n\r\n  fileInputs.addEventListener('change', function () {\r\n    var files = fileInputs.files;\r\n    if (files.length > 0) {\r\n      preview.classList.add('show')\r\n      for (var i = 0; i < files.length; i++) {\r\n        var reader = new FileReader();\r\n        reader.onload = createImageElement;\r\n        reader.readAsDataURL(files[i]);\r\n      }\r\n    }\r\n  });\r\n\r\n  function createImageElement(event) {\r\n    var image = new Image();\r\n    image.src = event.target.result;\r\n    preview.appendChild(image);\r\n  }\r\n}\r\n\r\nvar fileUpload3 = document.getElementById('file-upload3');\r\nvar fileInputs3 = document.getElementById('file-input3');\r\nvar preview2 = document.querySelector(\"#preview2\");\r\n\r\nif (fileUpload3) {\r\n  fileUpload3.addEventListener('dragover', function (e) {\r\n    e.preventDefault();\r\n    fileUpload3.classList.add('dragover');\r\n  });\r\n\r\n  fileUpload3.addEventListener('dragleave', function (e) {\r\n    e.preventDefault();\r\n    fileUpload3.classList.remove('dragover');\r\n  });\r\n\r\n  fileUpload3.addEventListener('drop', function (e) {\r\n    e.preventDefault();\r\n    fileUpload3.classList.remove('dragover');\r\n    var files = e.dataTransfer.files;\r\n    if (files.length > 0) {\r\n      for (var i = 0; i < files.length; i++) {\r\n        var reader = new FileReader();\r\n        reader.onload = createImageElement2;\r\n        reader.readAsDataURL(files[i]);\r\n      }\r\n    }\r\n  });\r\n\r\n  fileInputs3.addEventListener('change', function () {\r\n    var files = fileInputs.files;\r\n    if (files.length > 0) {\r\n      preview2.classList.add('show')\r\n      for (var i = 0; i < files.length; i++) {\r\n        var reader = new FileReader();\r\n        reader.onload = createImageElement2;\r\n        reader.readAsDataURL(files[i]);\r\n      }\r\n    }\r\n  });\r\n\r\n  function createImageElement2(event) {\r\n    var image = new Image();\r\n    image.src = event.target.result;\r\n    preview2.appendChild(image);\r\n  }\r\n}\r\nvar steps = document.getElementsByClassName('step');\r\nif (steps) {\r\n  document.addEventListener('DOMContentLoaded', function () {\r\n    var totalSteps = 6;\r\n    var nextButtons = document.getElementsByClassName('nextStep');\r\n    var previousButtons = document.getElementsByClassName('previousStep');\r\n    var publishButton = document.getElementsByClassName('publish')[0];\r\n    var saveDraftButton = document.getElementsByClassName('saveDraft')[0];\r\n\r\n    var isTransitioning = false; // Флаг для блокировки повторных переходов\r\n\r\n    function showStep(step) {\r\n      if (isTransitioning) return; // Если переход уже выполняется, игнорируем повторные вызовы\r\n      isTransitioning = true; // Устанавливаем флаг перехода\r\n\r\n      for (var i = 0; i < steps.length; i++) {\r\n        steps[i].style.display = 'none';\r\n      }\r\n      document.getElementById('step' + step).style.display = 'block';\r\n\r\n      setTimeout(function () {\r\n        isTransitioning = false; // Сбрасываем флаг перехода после задержки\r\n      }, 500); // Задержка в миллисекундах\r\n    }\r\n\r\n    function nextStep() {\r\n      var currentStep = parseInt(this.getAttribute('data-step')) - 1;\r\n      if (currentStep < totalSteps) {\r\n        showStep(currentStep + 1);\r\n      }\r\n    }\r\n\r\n    function previousStep() {\r\n      var currentStep = parseInt(this.getAttribute('data-step')) + 1;\r\n      if (currentStep > 1) {\r\n        showStep(currentStep - 1);\r\n      }\r\n    }\r\n\r\n    function publish() {\r\n      // Логика для опубликования объявления\r\n    }\r\n\r\n    function saveDraft() {\r\n      // Логика для сохранения объявления в черновик\r\n    }\r\n\r\n    for (var i = 0; i < nextButtons.length; i++) {\r\n      nextButtons[i].addEventListener('click', function () {\r\n        if (!isTransitioning) {\r\n          nextStep.call(this);\r\n        }\r\n      });\r\n    }\r\n\r\n    for (var i = 0; i < previousButtons.length; i++) {\r\n      previousButtons[i].addEventListener('click', function () {\r\n        if (!isTransitioning) {\r\n          previousStep.call(this);\r\n        }\r\n      });\r\n    }\r\n\r\n    publishButton.addEventListener('click', publish);\r\n    saveDraftButton.addEventListener('click', saveDraft);\r\n\r\n    showStep(1);\r\n  });\r\n}\r\n\r\nvar addresscontainer = document.getElementById('address-container');\r\nif (addresscontainer) {\r\n  // Функция для создания нового поля адреса\r\n  function createAddressField() {\r\n\r\n    var field = document.createElement('div');\r\n    field.classList.add('address-field');\r\n\r\n    var input = document.createElement('input');\r\n    input.type = 'text';\r\n    input.placeholder = 'Адрес';\r\n\r\n    var deleteButton = document.createElement('button');\r\n    deleteButton.classList.add('delete-field');\r\n    deleteButton.textContent = '';\r\n\r\n    field.appendChild(input);\r\n    field.appendChild(deleteButton);\r\n    addresscontainer.appendChild(field);\r\n\r\n    // При создании нового поля обновляем обработчики событий\r\n    updateEventHandlers();\r\n  }\r\n\r\n  // Функция для удаления поля адреса\r\n  function deleteAddressField() {\r\n    var field = this.parentNode;\r\n    var addresscontainer = field.parentNode;\r\n    addresscontainer.removeChild(field);\r\n  }\r\n\r\n  // Функция для обновления обработчиков событий на полях адреса\r\n  function updateEventHandlers() {\r\n    var fields = document.getElementsByClassName('address-field');\r\n\r\n    // Добавляем обработчик события на кнопку удаления поля\r\n    for (var i = 0; i < fields.length; i++) {\r\n      var deleteButton = fields[i].querySelector('.delete-field');\r\n      deleteButton.addEventListener('click', deleteAddressField);\r\n\r\n      // Деактивируем кнопку удаления для первого поля\r\n      if (i === 0) {\r\n        deleteButton.disabled = true;\r\n      } else {\r\n        deleteButton.disabled = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Обработчик события для кнопки \"Добавить адрес\"\r\n  document.getElementById('add-address').addEventListener('click', createAddressField);\r\n\r\n  // Инициализация обработчиков событий\r\n  updateEventHandlers();\r\n}\r\n\n\n//# sourceURL=webpack://gulp-starter/./src/js/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/main.js"]();
/******/ 	
/******/ })()
;